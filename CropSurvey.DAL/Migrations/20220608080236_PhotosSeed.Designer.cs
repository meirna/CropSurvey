// <auto-generated />
using System;
using CropSurvey.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CropSurvey.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220608080236_PhotosSeed")]
    partial class PhotosSeed
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("CropSurvey.Model.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<int?>("Age")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<int?>("GenderID")
                        .HasColumnType("int");

                    b.Property<int?>("KnowledgeLevelID")
                        .HasColumnType("int");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool?>("WantResults")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("GenderID");

                    b.HasIndex("KnowledgeLevelID");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("CropSurvey.Model.Crop", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Algorithm")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AspectRatio")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhotoID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Timer")
                        .HasColumnType("float");

                    b.HasKey("ID");

                    b.HasIndex("PhotoID");

                    b.ToTable("Crops");
                });

            modelBuilder.Entity("CropSurvey.Model.Gender", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Genders");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Name = "Muški"
                        },
                        new
                        {
                            ID = 2,
                            Name = "Ženski"
                        },
                        new
                        {
                            ID = 3,
                            Name = "Nije navedeno"
                        });
                });

            modelBuilder.Entity("CropSurvey.Model.KnowledgeLevel", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("KnowledgeLevels");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Name = "Nikakvo do osnovno"
                        },
                        new
                        {
                            ID = 2,
                            Name = "Osnovno do srednje"
                        },
                        new
                        {
                            ID = 3,
                            Name = "Srednje do napredno"
                        });
                });

            modelBuilder.Entity("CropSurvey.Model.Photo", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CategoryID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("CategoryID");

                    b.ToTable("Photos");

                    b.HasData(
                        new
                        {
                            ID = "1636053650_4527b0585d_o.jpg",
                            CategoryID = 1
                        },
                        new
                        {
                            ID = "5244375725_31bd21d487_b.jpg",
                            CategoryID = 1
                        },
                        new
                        {
                            ID = "17107351976_7ca3d58d0c_c.jpg",
                            CategoryID = 1
                        },
                        new
                        {
                            ID = "18421963655_2727ba7430_c.jpg",
                            CategoryID = 1
                        },
                        new
                        {
                            ID = "19538819028_1797fb1da6_c.jpg",
                            CategoryID = 1
                        },
                        new
                        {
                            ID = "521658559_37f2907db4_b.jpg",
                            CategoryID = 2
                        },
                        new
                        {
                            ID = "2794729330_69101390e5_b.jpg",
                            CategoryID = 2
                        },
                        new
                        {
                            ID = "8698896427_3dc7d59b02_c.jpg",
                            CategoryID = 2
                        },
                        new
                        {
                            ID = "10594271873_611e07a39d_c.jpg",
                            CategoryID = 2
                        },
                        new
                        {
                            ID = "13218800635_d1bf8dae11_c.jpg",
                            CategoryID = 2
                        },
                        new
                        {
                            ID = "4192603791_ef6a86762b_b.jpg",
                            CategoryID = 3
                        },
                        new
                        {
                            ID = "6060249948_51746b754f_b.jpg",
                            CategoryID = 3
                        },
                        new
                        {
                            ID = "8328219972_f44dd01091_c.jpg",
                            CategoryID = 3
                        },
                        new
                        {
                            ID = "16493328124_5facf01cba_c.jpg",
                            CategoryID = 3
                        },
                        new
                        {
                            ID = "18030243279_5e1d9c14cc_c.jpg",
                            CategoryID = 3
                        });
                });

            modelBuilder.Entity("CropSurvey.Model.PhotoCategory", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("PhotoCategories");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Name = "one_subject"
                        },
                        new
                        {
                            ID = 2,
                            Name = "multiple_subjects"
                        },
                        new
                        {
                            ID = 3,
                            Name = "no_subject"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("CropSurvey.Model.AppUser", b =>
                {
                    b.HasOne("CropSurvey.Model.Gender", "Gender")
                        .WithMany("Users")
                        .HasForeignKey("GenderID");

                    b.HasOne("CropSurvey.Model.KnowledgeLevel", "KnowledgeLevel")
                        .WithMany("Users")
                        .HasForeignKey("KnowledgeLevelID");

                    b.Navigation("Gender");

                    b.Navigation("KnowledgeLevel");
                });

            modelBuilder.Entity("CropSurvey.Model.Crop", b =>
                {
                    b.HasOne("CropSurvey.Model.Photo", "Photo")
                        .WithMany("Crops")
                        .HasForeignKey("PhotoID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Photo");
                });

            modelBuilder.Entity("CropSurvey.Model.Photo", b =>
                {
                    b.HasOne("CropSurvey.Model.PhotoCategory", "Category")
                        .WithMany("Photos")
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("CropSurvey.Model.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("CropSurvey.Model.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CropSurvey.Model.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("CropSurvey.Model.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CropSurvey.Model.Gender", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("CropSurvey.Model.KnowledgeLevel", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("CropSurvey.Model.Photo", b =>
                {
                    b.Navigation("Crops");
                });

            modelBuilder.Entity("CropSurvey.Model.PhotoCategory", b =>
                {
                    b.Navigation("Photos");
                });
#pragma warning restore 612, 618
        }
    }
}
